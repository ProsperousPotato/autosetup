#!/bin/sh

check_user() {
    [ $UID -ne 0 ] && read -p "You are not root, run the comand 'su' before attempting to run this script [Enter to exit] " continue && exit 1
}


create_user() {
    read -p "Enter the username: " username
    
    [ -z "$username" ] && echo "Username cannot be empty. Exiting." && exit 1
    
    id "$username" &>/dev/null && echo "$username already exists. Exiting." && exit 1
    
    read -sp "Enter the password: " password
    echo
    
    [ -z "$password" ] && password=$(openssl rand -base64 12) && echo "No password provided. Generated random password: $password"
    
    read -p "Enter specific groups to join, defaults recommended: " groups
    
    useradd -m "$username"
    echo "$username ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    
    echo "$username:$password" | chpasswd
    
    [ -n "$groups" ] && usermod -aG $groups "$username" || usermod -aG root,tty,wheel,audio,video,input,storage "$username"
    
    echo "$username created successfully."
    echo "Username: $username"
    echo "Password: $password"
    [ -n "$groups" ] && read -p "Groups: $groups [Enter to continue] " continue || read -p "Groups: root tty wheel audio video input storage [Enter to continue] " continue
    
    clear
}

artix_add_arch_repos() {
    [ "$ID" == "artix" ] && pacman -S --needed --noconfirm artix-archlinux-support && grep -q '# Arch' /etc/pacman.conf || {
        echo -e "\n\n# Arch\n[extra]\n Include = /etc/pacman.d/mirrorlist-arch\n\n[multilib]\n Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
    } && pacman-key --populate archlinux && pacman -Sy
    clear
}

install_yay() {
    ls /bin | grep -iq yay || {
    read -p "Installing yay. [Press enter to continue] " continue
    su $username -c "\
    git clone https://aur.archlinux.org/yay-bin.git /home/$username/yay && \
    chmod a+w /home/$username/yay && \
    cd /home/$username/yay && \
    makepkg --noconfirm -si
    "
    clear
    }
}

check_distro() {
    distro_like=$ID_LIKE
    case $ID in
        gentoo)
            packList="gentoo/$ID.txt"
            echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: emerge"
            read -p "Packages will be installed and files will be placed in directories that may overwrite original configuration [Press enter to continue] " continue
            xargs emerge -v < $packList
            ;;
        debian)
            packList="debian/$ID.txt"
            echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: apt-get"
            read -p "Packages will be installed and files will be placed in directories that may overwrite original configuration [Press enter to continue] " continue
            read -p "Installing packages for your system from $packList with apt-get [Press enter to continue] " continue ; xargs apt-get -y install < $packList
            ;;
        fedora|rhel)
            packList="fedora/fedora.txt"
            echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: dnf" && sleep 2
            read -p "Packages will be installed and files will be placed in directories that may overwrite original configuration [Press enter to continue] " continue 
            read -p "Installing packages for your system from $packList with dnf [Press enter to continue] " continue ; xargs dnf -y install < $packList
            ;;
        arch|artix)
            packList="arch/$ID.txt"
            echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: pacman" && sleep 2
            read -p "Install yay AUR helper? [Y/n]" installyay
            [ "installyay" == "n" ] && echo "ok" || install_yay
            read -p "Packages will be installed and files will be placed in directories that may overwrite original configuration [Press enter to continue] " continue
            read -p "Installing packages for your system from $packList with pacman [Press enter to continue] " continue ; xargs pacman -Sy --needed --noconfirm < $packList
            ;;
        opensuse|suse)
            packList="suse/suse.txt"
            echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: zypper" && sleep 2
            read -p "Packages will be installed and files will be placed in directories that may overwrite original configuration [Press enter to continue] " continue
            read -p "Installing packages for your system from $packList with zypper [Press enter to continue] " continue ; xargs zypper install -l -y < $packList
            ;;
        *)
            echo "Could not find your distro from ID, checking from ID_LIKE" && sleep 1
            case $ID_LIKE in 
                gentoo)
                    packList="gentoo/$ID.txt"
                    echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: emerge"
                    read -p "Packages will be installed and files will be placed in directories that may overwrite original configuration [Press enter to continue] " continue
                    xargs emerge -v < $packList
                    ;;
                debian|ubuntu)
                    packList="debian/$ID.txt"
                    echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: apt-get" && sleep 2
                    echo "Packages will be installed and files will be placed in directories that may overwrite original configurations"
                    read -p "Installing packages for your system from $packList with apt-get [Press enter to continue] " continue ; xargs apt-get -y install < $packList
                    ;;
                fedora|rhel)
                    packList="fedora/$ID.txt"
                    echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: dnf" && sleep 2
                    echo "Packages will be installed and files will be placed in directories that may overwrite original configurations"
                    read -p "Installing packages for your system from $packList with dnf [Press enter to continue] " continue ; xargs dnf -y install < $packList
                    ;;
                arch|artix)
                    packList="arch/$ID.txt"
                    echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: pacman" && sleep 2kkkkkkkk
                    read -p "Install yay AUR helper? [Y/n]" installyay
                    [ "installyay" == "n" ] && echo "ok" || install_yay
                    echo "Packages will be installed and files will be placed in directories that may overwrite original configurations"
                    read -p "Installing packages for your system from $packList with pacman [Press enter to continue] " continue ; xargs pacman -Sy --needed --noconfirm < $packList
                    ;;
                opensuse|suse)
                    packList="suse/$ID.txt"
                    echo "Distro: $ID" ; echo "Package List: $packList" ; echo "Package Manager: zypper" && sleep 2
                    echo "Packages will be installed and files will be placed in directories that may overwrite original configurations"
                    read -p "Installing packages for your system from $packList with zypper [Press enter to continue] " continue ; xargs zypper install -l -y < $packList
                    ;;
                *)
                    echo "Could not find your distro from ID or ID_LIKE in /etc/os-release. Exiting." && exit 1
            esac
            ;;
    esac
}

get_dots() {
    echo "Cloning dot file directory" && sleep 1
    cd $sdir
    git clone --quiet https://github.com/ProsperousPotato/dotfiles
    cd dotfiles
    echo "Moving dotfiles to dotfile directories" && sleep 2
    mv -f xorg.conf.d/* /etc/X11/xorg.conf.d/
    mv -f Xresources /home/$username/.Xresources
    mv -f bash_profile /home/$username/.bash_profile
    mv -f bashrc /home/$username/.bashrc
    mv -f gtkrc-2.0 /home/$username/.gtkrc-2.0
    mv -f inputrc /home/$username/.inputrc
    mv -f xinitrc /home/$username/.xinitrc
    chmod +x local/bin/*
    chmod -x local/bin/bookmarksfile
    chmod +x config/lf/cleaner
    chmod +x config/lf/scope
    mv -f config /home/$username/.config ; mv -f local /home/$username/.local ; mkdir /home/$username/.local/src
    cd .. && rm -rf dotfiles
}

get_gitrepos() {
    cd /home/$username/.local/src/
    git clone --quiet https://github.com/ProsperousPotato/dwm && cd dwm && make clean install && cd ..
    git clone --quiet https://github.com/ProsperousPotato/dmenu && cd dmenu && make clean install && cd ..
    git clone --quiet https://github.com/ProsperousPotato/st && cd st && make clean install && cd ..
    git clone --quiet https://github.com/ProsperousPotato/nsxiv && cd nsxiv/nsxiv && make clean install && cd ../..
    git clone --quiet https://github.com/ProsperousPotato/slstatus && cd slstatus && make clean install && cd ..
    git clone --quiet https://github.com/ProsperousPotato/slock && cd slock && cp -f config.def.h config.h && make clean install
    cd $sdir 
}
completion() {
    chown -R $username /home/$username/
    echo "autosetup script completed, type 'man dwm' for instructions on keyboard shortcuts, then log in to your user and it should automagically start a dwm session"
}
